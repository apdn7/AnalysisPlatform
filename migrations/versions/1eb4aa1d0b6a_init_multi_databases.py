"""init multi databases

Revision ID: 1eb4aa1d0b6a
Revises:
Create Date: 2019-12-10 14:15:49.338096

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '1eb4aa1d0b6a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()['upgrade_%s' % engine_name]()


def downgrade(engine_name):
    globals()['downgrade_%s' % engine_name]()


def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'm_global',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'm_period',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('start_tm', sa.Text(), nullable=True),
        sa.Column('end_tm', sa.Text(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        't_global_relation',
        sa.Column('global_id', sa.Integer(), nullable=False),
        sa.Column('relate_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.Column('is_outlier', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('global_id', 'relate_id'),
    )
    op.create_table(
        'm_process',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('period_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.Text(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['period_id'], ['m_period.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        'm_sensor',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('process_id', sa.Integer(), nullable=True),
        sa.Column('column_name', sa.Text(), nullable=True),
        sa.Column('type', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['process_id'], ['m_process.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        't_cycle',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('global_id', sa.Integer(), nullable=True),
        sa.Column('process_id', sa.Integer(), nullable=True),
        sa.Column('time', sa.Text(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ['global_id'],
            ['m_global.id'],
        ),
        sa.ForeignKeyConstraint(['process_id'], ['m_process.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        't_sensor_type_int',
        sa.Column('cycle_id', sa.Integer(), nullable=False),
        sa.Column('sensor_id', sa.Integer(), nullable=False),
        sa.Column('time', sa.Text(), nullable=True),
        sa.Column('value', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['cycle_id'], ['t_cycle.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['sensor_id'], ['m_sensor.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('cycle_id', 'sensor_id'),
    )
    op.create_table(
        't_sensor_type_real',
        sa.Column('cycle_id', sa.Integer(), nullable=False),
        sa.Column('sensor_id', sa.Integer(), nullable=False),
        sa.Column('time', sa.Text(), nullable=True),
        sa.Column('value', sa.Float(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['cycle_id'], ['t_cycle.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['sensor_id'], ['m_sensor.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('cycle_id', 'sensor_id'),
    )
    op.create_table(
        't_sensor_type_text',
        sa.Column('cycle_id', sa.Integer(), nullable=False),
        sa.Column('sensor_id', sa.Integer(), nullable=False),
        sa.Column('time', sa.Text(), nullable=True),
        sa.Column('value', sa.Text(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['cycle_id'], ['t_cycle.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['sensor_id'], ['m_sensor.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('cycle_id', 'sensor_id'),
    )
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('t_sensor_type_text')
    op.drop_table('t_sensor_type_real')
    op.drop_table('t_sensor_type_int')
    op.drop_table('t_cycle')
    op.drop_table('m_sensor')
    op.drop_table('m_process')
    op.drop_table('t_global_relation')
    op.drop_table('m_period')
    op.drop_table('m_global')
    # ### end Alembic commands ###


def upgrade_app_metadata():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        't_job_management',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            'job_type',
            sa.Enum('DEL_PROCESS', 'CSV_IMPORT', 'GEN_GLOBAL', name='jobtype'),
            nullable=True,
        ),
        sa.Column('db_code', sa.Text(), nullable=True),
        sa.Column('db_name', sa.Text(), nullable=True),
        sa.Column('process_id', sa.Integer(), nullable=True),
        sa.Column('process_name', sa.Text(), nullable=True),
        sa.Column('start_tm', sa.Text(), nullable=True),
        sa.Column('end_tm', sa.Text(), nullable=True),
        sa.Column(
            'status',
            sa.Enum('DONE', 'FAILED', 'PROCESSING', 'PENDING', 'KILLED', name='jobstatus'),
            nullable=True,
        ),
        sa.Column('done_percent', sa.Float(), nullable=True),
        sa.Column('duration', sa.Float(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.Column('updated_at', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        't_csv_import',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('job_id', sa.Integer(), nullable=True),
        sa.Column('process_id', sa.Integer(), nullable=True),
        sa.Column('file_name', sa.Text(), nullable=True),
        sa.Column('start_tm', sa.Text(), nullable=True),
        sa.Column('end_tm', sa.Text(), nullable=True),
        sa.Column('imported_row', sa.Integer(), nullable=True),
        sa.Column(
            'status',
            sa.Enum('DONE', 'FAILED', 'PROCESSING', 'PENDING', 'KILLED', name='jobstatus'),
            nullable=True,
        ),
        sa.Column('error_msg', sa.Text(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.Column('updated_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ['job_id'],
            ['t_job_management.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_table(
        't_gen_global_id',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('job_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.Text(), nullable=True),
        sa.Column('updated_at', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ['job_id'],
            ['t_job_management.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.drop_index('ix_apscheduler_jobs_next_run_time', table_name='apscheduler_jobs')
    op.drop_table('apscheduler_jobs')
    # ### end Alembic commands ###


def downgrade_app_metadata():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'apscheduler_jobs',
        sa.Column('id', sa.VARCHAR(length=191), nullable=False),
        sa.Column('next_run_time', sa.FLOAT(), nullable=True),
        sa.Column('job_state', sa.BLOB(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index('ix_apscheduler_jobs_next_run_time', 'apscheduler_jobs', ['next_run_time'], unique=False)
    op.drop_table('t_gen_global_id')
    op.drop_table('t_csv_import')
    op.drop_table('t_job_management')
    # ### end Alembic commands ###
